// Generated by info.scce.cinco.product.userdocumentation.codegen.SeleniumScriptGenerator
package main

import java.io.File;
import java.time.Duration;
import java.io.IOException;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.OutputType;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;

/**
 * This class is the main entry point of the model-based generated application.
 * Whenever you make some changes to your model and click generate, this class will be
 * automatically regenerated.
 * 
 * It is discouraged to edit this class, since any changes made will be overwritten.
 *
 * @author Mukendi Mputu
 */
class GetSeleniumScreenshots implements Runnable{
	// User Credentials
	private static String username;
	private static String password;
	private static String email;
	private static WebDriver firefoxDriver;
	private static WebDriverWait wait;
	// No Selenium Property were specified
	private static WebElement element;
	private static Long DEFAULT_TIMEOUT = 10L;

	private GetSeleniumScreenshots() {
		username = "john";
		email = "j.doe@example.com";
		password = "pwd";
		System.setProperty("webdriver.gecko.driver", "/home/mukendi/opt/WebDriver/bin/geckodriver");
		firefoxDriver = new FirefoxDriver();
		wait = new WebDriverWait(firefoxDriver, Duration.ofSeconds(DEFAULT_TIMEOUT));
		element = null;
	}

	public static void main(String[] args) {
		Main app = new Main();
		app.run();
	}

	@Override
	public void run() {
		// For every feature container in the MGL generate a sequence of methods
		this.openBrowser();
		{
			// Start of sequence Login Feature
			try {
				// DocNode Login
				this.goToPage("http://localhost:3000");
				this.clickBtn("data-target", "#login_main");
				this.typeIn("id", "password", "Asdfjklö");
				this.typeIn("id", "email", "mputustella@yahoo.de");
				this.takePageScreenshot("", "UserCredentials"); 
				this.clickBtn("type", "submit");
				this.takePageScreenshot("", "SubmitBtn"); 
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		{
			// Start of sequence Login Feature 2
			try {
				// DocNode GoToLoginPage
				this.goToPage("http://localhost:3000/login");
				// DocNode EnterUserCredentials
				this.typeIn("id", "password", "Asdfjklö");
				this.typeIn("id", "email", "mputustella@yahoo.de");
				this.takePageScreenshot("", "UserCredentials"); 
				this.clickBtn("type", "submit");
				this.takePageScreenshot("", "SubmitBtn"); 
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		this.closeBrowser();
	}

	/*================== Selenium Methods ==================*/

	public Boolean openBrowser()
	{
		GetSeleniumScreenshots.firefoxDriver.manage().window().maximize();
		return true;
	}
	public Boolean goToPage(String sSiteURL)
	{
		GetSeleniumScreenshots.firefoxDriver.get(sSiteURL);
		return true;
	}
	public Boolean takePageScreenshot(String folderName, String pictureName) throws IOException
	{
		//Use TakesScreenshot method to capture screenshot
		TakesScreenshot screenshot = (TakesScreenshot)GetSeleniumScreenshots.firefoxDriver;
		File source = screenshot.getScreenshotAs(OutputType.FILE);
		FileUtils.copyFile(source, new File("./"+folderName+"/" + pictureName + ".png"));
		return true;
	}
	public Boolean takeElementScreenshot(WebElement pElement, String folderName, String pictureName) throws IOException
	{
		//Capture single element screenshot
		File source = pElement.getScreenshotAs(OutputType.FILE);
		FileUtils.copyFile(source, new File("./"+folderName+"/" + pictureName + ".png"));
		return true;
	}
	public WebElement findPageElement(String selector, String selector_value)
	{
		return GetSeleniumScreenshots.firefoxDriver.findElement(By.xpath("//*[@"+selector+"='"+selector_value+"']"));
	}
	public void highlightElement(WebElement elem)
	{
		JavascriptExecutor jsExec = (JavascriptExecutor)GetSeleniumScreenshots.firefoxDriver;
		jsExec.executeScript("arguments[0].setAttribute('style','border: 2px solid red;');", elem);
	}
	public Boolean typeIn(String selector, String selectorValue, String contentText)
	{
		WebElement inputField = findPageElement(selector, selectorValue);
		inputField.sendKeys(contentText + Keys.TAB);
		return true;
	}
	public Boolean waitUntilElementPresent(String elementID) {
		return wait.until(presenceOfElementLocated(By.xpath("//*[@id='"+elementID+"']")))!= null;
	}
	public Boolean clickBtn(String selector, String value)
	{
		WebElement btn = findPageElement(selector, value);
		btn.click();
		return true;
	}
	public Boolean pressEnter()
	{
		WebElement enterBtn = findPageElement("type", "submit");
		highlightElement(enterBtn);
		enterBtn.click();
		return true;
	}
	public void closeBrowser()
	{
		GetSeleniumScreenshots.firefoxDriver.close();
	}
}
